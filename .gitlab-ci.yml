#job:
  # use special keywords
#  when: manual
#  script:
#    - echo " Executa somente manual."

#job:
#  script:
#    - echo "Um exemplo de sessao de script."
#  after_script:
#    - echo "Execute este comando depois de um conjunto completo de `script`."

#job:
#  script:
#    - echo "Um exemplo de executar pipeline quando muda um arquivo."
#  only:
#    changes:
#      - teste.txt
#      - docker/scripts/*
#        - "*.md"
#      - more_scripts/*.{rb,py,sh}

#job:
#  script:
#    - echo "Mostrando variaveis do GitLab"
#    - export

#job:
#  script: echo "Pipeline executa quando for na branch main e com usuário claudiosilva"
#  rules:
#    - if: '$CI_COMMIT_BRANCH == "main" && $GITLAB_USER_LOGIN == "claudiosilva"'
#      when: manual
#    - if: '$CI_COMMIT_BRANCH == "feature"'
#      when: never
#      allow_failure: true

#job:
#  only:
#    - tags
#  script:
#    - echo " Este Job executa somente com tag."
#  when: manual

#end-to-end:
#  script: echo "Executa exceto mensagem de commit skip-tests"
#  except:
#    variables:
#      - $CI_COMMIT_MESSAGE =~ /skip-tests/

#Executar com cronometro:
#  stage: deploy
#  script: echo 'Execucao em 1 minuto...'
#  when: delayed
#  start_in: 1 minutes #5 seconds, 30 minutes, 1 day, 1 week

#job:
#  parallel: 3
#  script:
#    - echo "3 trabalhos trabalho paralelo"

#job:
#  only:
#    - tags
#  when: manual
#  script:
#    - echo " Este Job executa com gatilho de tag."
# Utilizado para gatilho com curl
#curl -X POST \
#     --fail \
#     -F token=c450ddc1e103178a5f6c1d0cd9d6e9 \
#     -F "ref=0.0.1" \
#     https://gitlab.com/api/v4/projects/34316608/trigger/pipeline

#job:
#  timeout: 1m
#  script:
#    - sleep 20
#    - echo "executa com timeout para o stage com maximo de 1 minuto"

#job1:
#  only:
#    variables:
#      - $GATILHO == "valor"
#  script:
#    - echo "Executando job por uma variavel == valor"
# Utilizado como teste para gatilho com curl
#curl -X POST \
#     --fail \
#     -F token=c450ddc1e103178a5f6c1d0cd9d6e9 \
#     -F "ref=main" \
#     -F "variables[GATILHO]=valor" \
#     https://gitlab.com/api/v4/projects/34316608/trigger/pipeline

#job:
#  stage: test
#  script:
#    - echo "$CI_JOB_STAGE"

#image: alpine
#build_a:
#  script:
#    - echo "Este job compila somente."
#test_a:
#  needs: [build_a]
#  script:
#    - echo "este job precisa do build_a."
#deploy_a:
#  needs: [test_a]
#  script:
#    - echo "este job precisa do test_a."

#variables:
#  GLOBAL_VAR: global
#job1:
#  script:
#    - echo " Apresenta declaração de variavel $GLOBAL_VAR"
#job2:
#  variables:
#    LOCAL_VAR: local
#  script:
#    - echo Apresenta declaração de variavel $GLOBAL_VAR"
#    - echo Apresenta declaração de variavel $LOCAL_VAR"

#job:
#  script:
#    - echo "Este trabalho executa quando solicita mesclagem"
#  only:
#    - merge_requests

#job1:
#  variables:
#    FOLDERS: src test docs
#  script:
#    - echo "Script com mais de uma linha."
#    - |
#      i=0
#      while [ $i -ne 5 ]
#        do
#          i=$(($i+1))
#          echo "$i"
#      done

#job1: &cache
#  script:
#    - echo "Ola mundo $CI_BUILD_NAME"
#job2:
#  <<: *cache

#job:
#  script:
#    - echo "Exemplo de cache de arquivos."
#  artifacts:
#    name: "artefatos-exemplo"
#    when: on_success # faça upload de artefatos somente quando o trabalho for bem-sucedido
    # Faça upload de artefatos somente quando o trabalho falhar.
    # always: Sempre carregue artefatos (exceto quando os trabalhos expiram).
#    expire_in: 1 min 5 sec # '42' ; 42 seconds ; 3 mins 4 sec ; 2 hrs 20 min ; 2h20min ; 6 mos 1 day ; 47 yrs 6 mos and 4d ; 3 weeks and 2 days ; never
#    paths:
#      - teste.txt


############################
############################
stages:
  - qualidade
  - deploy
  - notificacao

variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task

sonarcloud-check:
  tags:
    - shell
  stage: qualidade
  only:
    variables:
      - $EXECUTAR == "deploy"
      - $EXECUTAR == "qualidade"
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner

deploy:
  stage: deploy
  tags:
    - shell
  only:
    variables:
      - $EXECUTAR == "deploy"
  script:
    - |
        if [ -e "/storage/wordpress/html" ]
        then
          echo " o diretorio existe"
        else
          echo " o diretorio não existe, vamos fazer deploy"
          sudo rsync -avh --progress wordpress/* /storage/wordpress/html/
          
        fi


notificacao-sucesso: &notificacao
  stage: notificacao
  tags:
    - shell
  only:
    variables:
      - $EXECUTAR == "deploy"
  when: on_success
  script:
  - sh notificacaoSucesso.sh

notificacao-falhas:
  <<: *notificacao
  when: on_failure
  script:
  - sh notificacaoFalha.sh

#Fontes
# Gatilho de pipeline com Curl - https://docs.gitlab.com/ee/ci/triggers/#use-curl
# Expirar artefatos - https://docs.gitlab.com/ee/ci/yaml/index.html#artifactsexpire_in
# - https://docs.gitlab.com/ee/ci/jobs/job_control.html
# Runner Docker - https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#register-a-runner-that-uses-the-docker-executor
